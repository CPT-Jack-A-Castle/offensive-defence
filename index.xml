<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Offensive Defence</title>
    <link>https://offensivedefence.co.uk/</link>
    <description>Recent content on Offensive Defence</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 29 Dec 2020 10:38:26 +0000</lastBuildDate>
    
	<atom:link href="https://offensivedefence.co.uk/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Adding DLL Exports with dnlib</title>
      <link>https://offensivedefence.co.uk/posts/dnlib-dllexport/</link>
      <pubDate>Tue, 29 Dec 2020 10:38:26 +0000</pubDate>
      
      <guid>https://offensivedefence.co.uk/posts/dnlib-dllexport/</guid>
      <description>Intro dnlib is an insanely powerful library for reading and writing .NET assemblies. It can be used to modify existing assemblies or even create new ones from scratch. It&amp;rsquo;s also used within other .NET modification/disassembly packages such as ConfuserEx and dnSpy.
I&amp;rsquo;m in the process of porting the SharpC2 payload generation capabilities from using roslyn to dnlib, and thought I would write about a fun use case.
Starting from a .</description>
    </item>
    
    <item>
      <title>AppDomain.AssemblyResolve</title>
      <link>https://offensivedefence.co.uk/posts/assembly-resolve/</link>
      <pubDate>Mon, 21 Dec 2020 12:06:54 +0000</pubDate>
      
      <guid>https://offensivedefence.co.uk/posts/assembly-resolve/</guid>
      <description>Intro Jean Maes posted a blog entitled &amp;ldquo;A tale of .NET assemblies, cobalt strike size constraints, and reflection&amp;rdquo;, which looked at how to use the AssemblyResolve event to locate .NET dependancies at runtime that were not already weaved into an assembly or located in the GAC.
For a decent background, I encourage readers to review Jean&amp;rsquo;s post. Since the author credits me for pointing them towards the event, I thought it would be informative to write about the scenario under which I came across it.</description>
    </item>
    
    <item>
      <title>D/Invokify PPID Spoofy &amp; BlockDLLs</title>
      <link>https://offensivedefence.co.uk/posts/ppidspoof-blockdlls-dinvoke/</link>
      <pubDate>Wed, 02 Dec 2020 10:52:26 +0000</pubDate>
      
      <guid>https://offensivedefence.co.uk/posts/ppidspoof-blockdlls-dinvoke/</guid>
      <description>Intro The EXTENDED_STARTUPINFO_PRESENT process creation flag is used by the Windows CreateProcess, CreateProcessAsUser, CreateProcessWithLogonW and CreateProcessWithTokenW APIs. A common use case for attackers and malware is to specify a PROC_THREAD_ATTRIBUTE_PARENT_PROCESS attribute (for PPID spoofing) and a PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY attribute (for BlockDLLs).
This has long been achievable in both native code and managed code (via P/Invoke), but has been somewhat elusive when it comes to D/Invoke. D/Invoke has numerous advantages over P/Invoke (from a .</description>
    </item>
    
    <item>
      <title>Module Stomping in C#</title>
      <link>https://offensivedefence.co.uk/posts/module-stomping/</link>
      <pubDate>Fri, 20 Nov 2020 16:22:10 +0000</pubDate>
      
      <guid>https://offensivedefence.co.uk/posts/module-stomping/</guid>
      <description>A little while ago I published what I described as a &amp;ldquo;barely functional module stomping in C#&amp;rdquo; proof of concept. It had a couple of (pretty bad) issues - the shellcode would execute multiple times and then crash the host process.
Ceri took an interest in the code, so we worked together to make it stable and to co-author this blog post.
What is Module Stomping? Module Stomping (which also seems to go by the names Module Overloading and DLL Hollowing), is a shellcode injection technique that works thusly:</description>
    </item>
    
    <item>
      <title>Using Custom Covenant Listener Profiles &amp; Grunt Templates to Elude AV</title>
      <link>https://offensivedefence.co.uk/posts/covenant-profiles-templates/</link>
      <pubDate>Sat, 07 Nov 2020 11:54:14 +0000</pubDate>
      
      <guid>https://offensivedefence.co.uk/posts/covenant-profiles-templates/</guid>
      <description>Whenever we download an offensive tool from the Internet, it comes as no surprise when it gets snapped up by an anti-virus solution. AV vendors are certainly keeping a keen eye on tools posted publicly (insert conspiracy theory about Microsoft owning GitHub) and are reacting relatively quickly to push signatures for those tools. However, it&amp;rsquo;s probably fair to say that these signatures are not particularly robust, and only really serve to catch those that don&amp;rsquo;t have the skills or knowledge to make the necesary modifications.</description>
    </item>
    
    <item>
      <title>Making AMSI Jump</title>
      <link>https://offensivedefence.co.uk/posts/making-amsi-jump/</link>
      <pubDate>Tue, 16 Jun 2020 10:52:27 +0100</pubDate>
      
      <guid>https://offensivedefence.co.uk/posts/making-amsi-jump/</guid>
      <description>Since 3.13, Cobalt Strike has had a Malleable C2 option called amsi_disable. This directive tells Beacon to patch the AmsiScanBuffer function in the host process prior to injecting post-ex capabilities such as powerpick and execute-assembly. This limits AMSI&amp;rsquo;s visibility of said process and (hopefully) prevents the PowerShell / .NET assemblies being executed from being scanned.
One set of workflows that amsi_disable does not apply to, are the new (as of 4.</description>
    </item>
    
    <item>
      <title>Is the grass greener on the other side?</title>
      <link>https://offensivedefence.co.uk/posts/is-the-grass-greener/</link>
      <pubDate>Wed, 10 Jun 2020 14:07:13 +0100</pubDate>
      
      <guid>https://offensivedefence.co.uk/posts/is-the-grass-greener/</guid>
      <description>Welcome all! Firstly, I’d like to say I am extremely excited to be able to share my thoughts with you all. This is my first ever blog, so bear with me. The main purpose of this specific blog post is to share my experiences with military service leavers, hopefully helping them with their transition into a security role in “civi-street”. It will also shine some light on the process for non-service personnel who might be interested.</description>
    </item>
    
    <item>
      <title>SharpSploit v1.6 Updates</title>
      <link>https://offensivedefence.co.uk/posts/sharpsploit-16/</link>
      <pubDate>Tue, 09 Jun 2020 13:12:56 +0100</pubDate>
      
      <guid>https://offensivedefence.co.uk/posts/sharpsploit-16/</guid>
      <description>Ryan Cobb has just tagged the release of SharpSploit v1.6, which comes with a number of cool changes. The most significant of which includes some very clever Dynamic Invocation functionality that TheWover has blogged about. My contributions were relatively minor and will be the subject of this post.
Enhanced WMI Output SharpSploit has had a WMIExecute method in the SharpSploit.LateralMovement namespace for as long as I can remember. It took in a target ComputerName, a Command to execute and optional plaintext creds, but it returned a bool.</description>
    </item>
    
    <item>
      <title>Offensive Defence</title>
      <link>https://offensivedefence.co.uk/posts/offensive-defence/</link>
      <pubDate>Fri, 05 Jun 2020 10:04:14 +0100</pubDate>
      
      <guid>https://offensivedefence.co.uk/posts/offensive-defence/</guid>
      <description>So welcome along to our joint blog with @_RastaMouse @Rythmstick and @Furby, I&amp;rsquo;m @CyberZombi3 we hope to blog about all levels of Red Team and Blue teaming, our combined skillsets, areas of expertise and desire to gain knowledge from one another should provide a little something for everyone so with that said this is my first blog here, which can also can be found at cyberzombi3.co.uk
I usually blog in the style of a basic guide, for this blog though I wanted to throw out a few suggestions around Offensive Defence (very apt don’t you think) Think how an attacker starts their mission, with some recon right.</description>
    </item>
    
  </channel>
</rss>